name: 'Build & Push Selected Docker Images to Docker Hub'

on:
  push:
    branches:
      - main

env:
  version: ${{ github.sha }}  # Assuming the tag is the commit SHA

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: [self-hosted, linux]
    outputs:
      filtered_packages: ${{ steps.filter.outputs.filtered_packages }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10  # Fetch enough commit history

      - name: Detect last two merge commits and diff
        id: changed
        run: |
          # Find the last two merge commits
          LAST_MERGE=$(git log --merges --pretty=format:'%H' -n 2)
          MERGE_ARRAY=($LAST_MERGE)
          LAST_MERGE_COMMIT=${MERGE_ARRAY[0]}
          PREV_MERGE_COMMIT=${MERGE_ARRAY[1]}
          
          # Show the two merge commits
          echo "Last merge commit: $LAST_MERGE_COMMIT"
          echo "Previous merge commit: $PREV_MERGE_COMMIT"
          
          # Get the diff between the two merge commits
          CHANGED_PACKAGES=$(git diff --name-only $PREV_MERGE_COMMIT $LAST_MERGE_COMMIT -- packages/ | cut -d '/' -f 1-2 | sort -u)
          echo "Detected changes: $CHANGED_PACKAGES"

          CLEANED_PACKAGES=$(echo "$CHANGED_PACKAGES" | tr -d '\r' | tr '\n' ' ')
          echo "Cleaned packages: $CLEANED_PACKAGES"
          
          # Save the package names to the environment
          echo "changed_packages=$CLEANED_PACKAGES" >> $GITHUB_ENV

      - name: Filter packages using case statement and map to numbers
        id: filter
        run: |
          CHANGED_PACKAGES="${{ env.changed_packages }}"
          FILTERED_PACKAGES=""

          # Map package paths to package numbers
          declare -A PACKAGE_MAP
          PACKAGE_MAP["packages/serverless"]=1
          PACKAGE_MAP["packages/broker-service"]=2
          PACKAGE_MAP["packages/proof-service"]=3
          PACKAGE_MAP["packages/ftp"]=4

          IFS=' ' read -r -a PACKAGE_ARRAY <<< "$CHANGED_PACKAGES"
          for PACKAGE in "${PACKAGE_ARRAY[@]}"; do
            case $PACKAGE in
              "packages/serverless") FILTERED_PACKAGES="$FILTERED_PACKAGES 1" ;;
              "packages/broker-service") FILTERED_PACKAGES="$FILTERED_PACKAGES 2" ;;
              "packages/proof-service") FILTERED_PACKAGES="$FILTERED_PACKAGES 3" ;;
              "packages/ftp") FILTERED_PACKAGES="$FILTERED_PACKAGES 4" ;;
            esac
          done

          # Output filtered packages
          FILTERED_PACKAGES=$(echo $FILTERED_PACKAGES | xargs)
          echo "filtered_packages=$FILTERED_PACKAGES" >> $GITHUB_OUTPUT

  build:
    name: Build & Push Docker Images and Push to GitOps
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build & Push Docker Images and Push to GitOps
        run: |
          GITOPSBRANCH="devops/test-gitops"
          # Define arrays for services, docker repos, and values.yaml paths
          SERVICES=("serverless" "broker-service" "proof-service" "ftp")
          DOCKER_REPOS=(
            "orochinetwork/zkdb-serverless"
            "orochinetwork/zkdb-broker-service"
            "orochinetwork/zkdb-proof-service"
            "orochinetwork/zkdb-ftp"
          )
          VALUES_PATHS=(
            "services/orochi/zkDatabase/serverless/zkdb-serverless/values.yaml"
            "services/orochi/zkDatabase/broker/zkdb-broker/values.yaml"
            "services/orochi/zkDatabase/proof/zkdb-proof/values.yaml"
            "services/orochi/zkDatabase/ftp/zkdb-ftp/values.yaml"
          )

          # Set up SSH for GitOps push
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          # Process each service dynamically using arrays
          for i in ${!SERVICES[@]}; do
            SERVICE="${SERVICES[$i]}"
            DOCKER_REPO="${DOCKER_REPOS[$i]}"
            VALUES_PATH="${VALUES_PATHS[$i]}"
            NUM=$((i + 1))

            # Ensure Docker repo is not empty before proceeding
            if [[ -n "$DOCKER_REPO" && "${{ needs.detect-changes.outputs.filtered_packages }}" == *"$NUM"* ]]; then
              echo "Building and pushing $SERVICE..."
              echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_ACCESS_TOKEN }}" > npm-token 

              # Build the Docker image with a valid tag
              docker build -t "$DOCKER_REPO:latest" \
                -f "packages/$SERVICE/Dockerfile" \
                --secret id=npm,src=./npm-token \
                --platform=linux/amd64 .
              # docker push "$DOCKER_REPO:latest"

              # GitOps push for the service
              # Clone the GitOps repository (once for all services)
              git config --global user.name "GitOps Updater"
              git config --global user.email "minhan112001@gmail.com"
              git clone git@github.com:ZKP-Labs/test-argoCD.git
              cd test-argoCD
              git checkout ${GITOPSBRANCH}
              sed -i "s| tag: .*| tag: ${version}|" "$VALUES_PATH"
              git fetch origin
              git add "$VALUES_PATH"
              git commit -m "$SERVICE: Update version to ${version}"
              git push origin ${GITOPSBRANCH}
            else
              echo "$SERVICE not changed or invalid Docker repo, skipping."
            fi
          done

          # Clean up GitOps repo
          cd ..
          rm -rf test-argoCD
